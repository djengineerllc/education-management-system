<ehcache>

<!-- 
设置缓存文件 .data 的创建路径。
如果该路径是 Java 系统参数，当前虚拟机会重新赋值。
下面的参数这样解释：
	user.home – 用户主目录
	user.dir – 用户当前工作目录
	java.io.tmpdir – 默认临时文件路径 
-->
<diskStore path="java.io.tmpdir"/>

<!-- 缺省缓存配置。CacheManager 会把这些配置应用到程序中。下列属性是 defaultCache 必须的：
maxInMemory - 设定内存中创建对象的最大值。
eternal - 设置元素（译注：内存中对象）是否永久驻留。如果是，将忽略超时限制且元素永不消亡。
timeToIdleSeconds - 设置某个元素消亡前的停顿时间。也就是在一个元素消亡之前，两次访问时间的最大时间间隔值。
					这只能在元素不是永久驻留时有效（译注：如果对象永恒不灭，则设置该属性也无用）。
					如果该值是 0 就意味着元素可以停顿无穷长的时间。
timeToLiveSeconds - 为元素设置消亡前的生存时间。也就是一个元素从构建到消亡的最大时间间隔值。这只能在元素不是永久驻留时有效。
overflowToDisk - 设置当内存中缓存达到 maxInMemory 限制时元素是否可写到磁盘上。
memoryStoreEvictionPolicy：缓存满了之后的淘汰算法。LRU和FIFO算法这里就不做介绍。LFU算法直接淘汰使用比较少的对象，在内存保留的都是一些经常访问的对象。对于大部分网站项目，该算法比较适用。 
如果应用需要配置多个不同命名并采用不同参数的Cache，可以相应修改配置文件，增加需要的Cache配置即可。 
-->

<defaultCache 
	maxElementsInMemory="1000" 
	eternal="true" 
	timeToIdleSeconds="3600" 
	timeToLiveSeconds="3600" 
	overflowToDisk="true" 
/>

<cache name="codesCache" 
	maxElementsInMemory="20000" 
	eternal="true"
	timeToIdleSeconds="3600"
	timeToLiveSeconds="3600"
	overflowToDisk="true"
/>
</ehcache>